
public class LongestIncreasingSubsequence {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int [] A = {0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15};
		LongestIncreasingSubsequence increasingSubsequence = new LongestIncreasingSubsequence();
		System.out.println(increasingSubsequence.lis(A));
	}
	public int lis(final int[] A) {
		int [] dp = new int [A.length];
		dp[0] = 0;
		int len = 0;
		for (int i = 1; i < A.length; i++) {
			if(A[i] < A[dp[0]]) {
				dp[0] = i;
			} else if (A[dp[len]] < A[i]) {
				len++;
				dp[len] = i;
				
			} else {
				int index = ceilIndex(A, dp, len, A[i]);
				dp[index] = i;
			}
		}
		return len+1;
    }
	
	private int ceilIndex (int [] A, int [] dp, int len, int s) {
		int start = 0;
		int end = len;
		int mid ;
		while(start<=end) {
			mid = (start + end)/2;
			if(mid<len && A[dp[mid]] <s && s<= A[dp[mid+1]]) {
				return mid+1;
			}else if(A[dp[mid]] < s) {
				mid = mid+1;
			} else {
				mid = mid-1;
			}
		}
		return -1;
	}
}
