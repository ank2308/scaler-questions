import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;

public class TopologicalSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
	
	public int[] solve(int A, int[][] B) {
		HashMap<Integer, ArrayList<Integer>> adjMatrix = makeAdjMatrixDirected(B);
		Queue<Integer> queue = new LinkedList<>();
		int [] inDegreeNode = populateInDegree(A, adjMatrix);
		
    }
	
	private int [] populateInDegree (int A, HashMap<Integer, ArrayList<Integer>> adjMatrix) {
		int  [] inDegree = new int [A+1];
		for (Integer key : adjMatrix.keySet()) {
			for (Integer node : adjMatrix.get(key)) {
				inDegree[node]++;
			}
		}
		return inDegree;
	}
	
	private HashMap<Integer, ArrayList<Integer>> makeAdjMatrixDirected (int [][]A ) {
		HashMap<Integer, ArrayList<Integer>> adjMatrix = new HashMap<>();
		for (int i = 0; i < A.length; i++) {
			ArrayList<Integer> tempList;
			if(adjMatrix.containsKey(A[i][0])){
				tempList = adjMatrix.get(A[i][0]);
				tempList.add(A[i][1]);
				adjMatrix.replace(A[i][0], tempList);
			} else {
				tempList = new ArrayList<>();
				tempList.add(A[i][1]);
				adjMatrix.put(A[i][0], tempList);
			}			
		}
		return adjMatrix;
	}

}
