import java.util.Deque;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;

class LRUCache {
    
	final Node head = new Node();
    final Node tail = new Node();
    Map<Integer, Node> lruCache;
    private final int CACHE_CAPACITY;
    
    public LRUCache(int capacity) {
        CACHE_CAPACITY = capacity;
        lruCache = new HashMap<>();
    }
    
    public int get(int key) {
        
    }
    
    public void put(int key, int value) {
        
    }
    
    private void add (Node node) {
        Node head_next = head.next;
        head.next = node;
        node.prev = head;
        node.next = head_next;
        head_next.prev = node;
    }
    
    private void remove(Node node) {
    	Node node_prev = node.prev;
    	Node node_next = node.next;
    	node_prev.next = node_next;
    	node_next.prev = node_prev;
    }
    
    class Node {
        int key;
        int val;
        Node next;
        Node prev;
    }
    
    public static void main(String [] args) {
    	LRUCache cache = new LRUCache(2);
    	cache.put(1, 1);
    	cache.put(2, 2);
    	System.out.println(cache.get(1));
    	cache.put(3, 3);
    	System.out.println(cache.get(2));
    	cache.put(4, 4);
    	System.out.println(cache.get(1));
    	System.out.println(cache.get(3));
    	System.out.println(cache.get(4));
    }
}
